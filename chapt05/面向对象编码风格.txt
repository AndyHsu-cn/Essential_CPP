01  面向对象的三个特性
    继承
    多态  
    动态绑定
    
    注：关于多态和动态绑定
    只有在通过抽象基类的pointer或reference操作共通接口时，才能体现

02  派生类
    使用派生类不必刻意区分“继承而来的成员”还是“自身定义的成员”，两者的使用完全透明

03  定义抽象类
    （1）找出所有子类共通的操作
    （2）确定和类型（子类）相关的操作行为，成为virtual函数
            有纯虚函数的类不能产生任何对象，只能用来派生子类
            一般原则，有virtual虚函数的基类的destructor一般声明为virtual
    （3）确定访问层级

04  虚函数静态解析
    使用基类对象，而不是基类的pointer或reference
    基类的constructor和destructor内

05  typeid
    使用前要#include <typeinfo>
    typeid是个运算符

06  类型转换
    static_cast<目标类型> （转化对象） --- 无条件转化
    dynameic_cast<目标类型> (转化对象) --- 能转则转，不能转返回0